#!/bin/bash
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# 0.4.8
# Alexey Potehin <gnuplanet@gmail.com>, http://www.gnuplanet.ru/doc/cv
#
# $ mkdir -m 0700 ~/.config &> /dev/null;
# $ git clone https://github.com/progman/gitbash.git ~/.config/gitbash;
# $ echo "source ~/.config/gitbash/gitbash" >> ~/.bashrc;
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_url()
{
	if [ "$(which git)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	if [ "${1}" != "" ];
	then
		git remote set-url origin "${1}" &> /dev/null;
		if [ "${?}" != "0" ];
		then
# maybe set-url is not exist
			if [ "$(git remote | grep origin | wc -l | { read COL1; echo ${COL1}; })" != "0" ];
			then
				git remote rm origin &> /dev/null; # obsolete
				git remote remove origin &> /dev/null;
			fi

			git remote add origin "${1}" &> /dev/null;
		fi
	fi

	if [ "$(git remote | grep origin | wc -l | { read COL1; echo ${COL1}; })" != "0" ];
	then
		local URL;
		URL=$(git remote get-url origin 2> /dev/null);
		if [ "${?}" != "0" ];
		then
# maybe get-url is not exist
			URL=$(git config -l | grep remote.origin.url | sed -e 's/remote.origin.url=//g');
		fi

		if [ "${URL}" != "" ];
		then
			echo "git clone ${URL}";
			echo "";
		fi
	fi
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_add_all()
{
	if [ "$(which git)" == "" ] || [ "$(which head)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi

	local CUR_DIR="${PWD}";
	local COMMIT="$(git log 2> /dev/null | head -n 1 | grep commit)";

	while true;
	do
		local DIR="${PWD}";
		cd ..;
		local COMMIT_NEW="$(git log 2> /dev/null | head -n 1 | grep commit)";

		if [ "${COMMIT_NEW}" != "${COMMIT}" ];
		then
			cd -- "${DIR}";
			git add .
			cd -- "${CUR_DIR}";
			break;
		fi
	done
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_pwd()
{
	if [ "$(which git)" == "" ] || [ "$(which head)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi

	local CUR_DIR="${PWD}";
	local COMMIT="$(git log 2> /dev/null | head -n 1 | grep commit)";

	while true;
	do
		local DIR="${PWD}";
		cd ..;
		local COMMIT_NEW="$(git log 2> /dev/null | head -n 1 | grep commit)";

		if [ "${COMMIT_NEW}" != "${COMMIT}" ];
		then
			echo "${DIR}";
			cd -- "${CUR_DIR}";
			break;
		fi
	done
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_cd()
{
	if [ "$(which git)" == "" ] || [ "$(which head)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	local GIT_PWD="$(git_pwd)";
	if [ "${GIT_PWD}" == "" ];
	then
		return;
	fi

	cd -- "${GIT_PWD}";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_gc()
{
	if [ "$(which git)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ] || [ "$(which du)" == "" ];
	then
		return;
	fi


	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi

	local COL1;
	local COL2;

	local OLD=$(du -sb | { read COL1 COL2; echo ${COL1}; });
	git gc --aggressive --prune=now &> /dev/null;
	local NEW=$(du -sb | { read COL1 COL2; echo ${COL1}; });

	local P;
	(( P = 0 - (100 - (NEW / ( OLD / 100 ))) ));

	echo "${OLD} -> ${NEW} (${P}%)";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_merge()
{
	if [ "${1}" == "" ];
	then
		echo "ERROR: missing branch name";
		return;
	fi
	echo "git merge --no-ff ${1} -m 'merge branch \"${1}\"'";
	git merge --no-ff ${1} -m "merge branch \"${1}\"";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_pull()
{
	if [ "$(git_url)" == "" ];
	then
		echo "ERROR: remote repository is not set";
		return;
	fi

	if [ "$(which git)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi

	echo "git fetch -ap";
	git fetch -ap;

	echo "git pull origin ${BRANCH}";
	git pull origin "${BRANCH}";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_push()
{
	if [ "$(git_url)" == "" ];
	then
		echo "ERROR: remote repository is not set";
		return;
	fi

	if [ "$(which git)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ];
	then
		return;
	fi

	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi

	echo "git push -u origin ${BRANCH}";
	git push -u origin "${BRANCH}";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_commit()
{
	if [ "$(which git)" == "" ];
	then
		return;
	fi

	git status &> /dev/null;
	if [ "${?}" != "0" ];
	then
		return;
	fi

	if [ "${1}" == "" ];
	then
		echo "git commit -a -m 'update'";
		git commit -a -m 'update';
	else
		echo "git commit -a -m \"${1}\"";
		git commit -a -m "${1}";
	fi
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_sync()
{
	if [ "$(git_url)" == "" ];
	then
		echo "ERROR: remote repository is not set";
		return;
	fi

	if [ "$(which git)" != "" ];
	then
		git_pull;
		git_push;
	fi
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function git_flush()
{
	if [ "$(which git)" == "" ];
	then
		return;
	fi

	git_commit "${1}";
	git_sync;
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function gitbash()
{
	if [ -e ~/.config/gitbash/README ] && [ -e ~/.config/gitbash/HELP ];
	then
		cat ~/.config/gitbash/README ~/.config/gitbash/HELP;
		return;
	fi

	if [ -e ~/.config/gitbash.git/README ] && [ -e ~/.config/gitbash.git/HELP ];
	then
		cat ~/.config/gitbash.git/README ~/.config/gitbash.git/HELP;
		return;
	fi
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function gitbash_help()
{
	gitbash;
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function gitbash_update()
{
	local CUR_PWD="${PWD}";

	if [ -e ~/.config/gitbash ];
	then
		cd ~/.config/gitbash;
	fi

	if [ -e ~/.config/gitbash.git ];
	then
		cd ~/.config/gitbash.git;
	fi

	git_pull;
	cd -- "${CUR_PWD}";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function gitbash_get_branch()
{
	if [ "$(which git)" == "" ] || [ "$(which grep)" == "" ] || [ "$(which sed)" == "" ] || [ "$(which mktemp)" == "" ];
	then
		return;
	fi


	local BRANCH="$(git branch 2>/dev/null | grep '^\*' | sed -e 's/^\*\ //g')";
	if [ "${BRANCH}" == "" ];
	then
		return;
	fi


# create temp dir and files
	local LOCAL_TMPDIR="/tmp";
	if [ "${TMPDIR}" != "" ] && [ -d "${TMPDIR}" ];
	then
		LOCAL_TMPDIR="${TMPDIR}";
	fi


	local TMP=$(mktemp "${LOCAL_TMPDIR}"/gitbash.XXXXXXXXXX);
	if [ "${?}" != "0" ];
	then
		return;
	fi


	local val;
	local GIT_STATUS;
	while true;
	do
		$(git status --porcelain --ignore-submodules 2> /dev/null > "${TMP}");
		if [ "${?}" != "0" ];
		then
			GIT_STATUS="(?)";
			break;
		fi

		if [ "$(grep -v '^??' "${TMP}" | grep -v '^AD' | wc -l | { read val; echo ${val}; })" != "0" ];
		then
			GIT_STATUS="(+)";
			break;
		fi

		if [ "$(grep '^??' "${TMP}" | wc -l | { read val; echo ${val}; })" != "0" ] && [ "${GITBASH_FLAG_UNTRACKED}" != "false" ];
		then
			GIT_STATUS="(-)";
			break;
		fi

		break;
	done


	rm -rf "${TMP}";


	if [ "${GITBASH_FLAG_COLOR}" == "true" ];
	then
		echo -en "\033[32m";
	fi

	echo -en "[${GIT_STATUS}git::${BRANCH}]";

	if [ "${GITBASH_FLAG_COLOR}" != "false" ];
	then
		echo -en "\033[0m";
	fi

	echo -en " ";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function gitbash_get_status()
{
	local SHELL_STATUS="${?}";
	local RESULT;


	if [ "${SHELL_STATUS}" != "0" ] && [ "${GITBASH_FLAG_SHELL_STATUS_ENABLE}" != "false" ];
	then
		RESULT+="{${SHELL_STATUS}} ";
	fi

	if [ "$(which date)" != "" ] && [ "${GITBASH_FLAG_DATE_ENABLE}" == "true" ];
	then
		RESULT+="$(date +'%Y%m%d%H%M%S') ";
	fi

	RESULT+="$(gitbash_get_branch)";


	echo "${RESULT}";
}
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# GITBASH_FLAG_COLOR='false';
# GITBASH_FLAG_UNTRACKED='true';
# GITBASH_FLAG_SHELL_STATUS_ENABLE='true';
# GITBASH_FLAG_DATE_ENABLE='false';

if [ "${USER}" == "root" ];
then
	export PS1='$(gitbash_get_status)\u@\h:\w# ';
else
	export PS1='$(gitbash_get_status)\u@\h:\w$ ';
fi
#-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
